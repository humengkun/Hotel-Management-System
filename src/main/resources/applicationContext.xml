<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:context="http://www.springframework.org/schema/context"
		xmlns:tx="http://www.springframework.org/schema/tx"
		xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans.xsd 
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context.xsd 
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx.xsd" >
		<!-- 配置通过扫描方式管理Service类对象 -->
		<context:component-scan base-package="com.hmk.pro.**" />
		<!-- <context:component-scan base-package="com.zhangbaiquan.pro">
			<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
			<context:exclude-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
		</context:component-scan> -->
		
		<!-- 通过注解方式装配属性文件 -->
		<context:property-placeholder location="classpath:dataSource.properties" />
		
		<!-- 配置数据源(连接池) http://www.cnblogs.com/wuyun-blog/p/5679073.html -->
		<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
			<property name="url" value="${jdbc.url}" />
			<property name="driverClassName" value="${jdbc.driver}"></property>
			<property name="username" value="${jdbc.username}" />
			<property name="password" value="${jdbc.password}" />
			<property name="initialSize" value="${initialSize}" />
			<property name="maxActive" value="${maxActive}" />
			<property name="minIdle" value="${minIdle}" />
			<property name="maxWait" value="${maxWait}" />
			<property name="removeAbandoned" value="${removeAbandoned}" />
			<property name="removeAbandonedTimeout" value="${removeAbandonedTimeout}" />
			<property name="logAbandoned" value="${logAbandoned}" />
		</bean>
		
		<!-- 整合Mybatis的SqlSessionFactory对象到Spring容器管理 -->
		<bean class="org.mybatis.spring.SqlSessionFactoryBean">
			<property name="dataSource" ref="dataSource" />
			<!-- 加载mybatis配置文件 -->
			<property name="configLocation" value="classpath:mybatis-cfg.xml" />
			<!-- 加载mapper映射文件 -->
 			<property name="mapperLocations" value="classpath:mapper/*Mapper.xml" />
			<!-- 扫描方式定义实体对象的别名 -->
			<property name="typeAliasesPackage" value="com.hmk.pro.po" />
		</bean>
		
		<!-- 通过扫描方式生成Mapper接口对应代理实现类 -->
		<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
			<!-- 配置对应接口 -->
			<property name="basePackage" value="com.hmk.pro.mapper.**" />
		</bean>
		<!-- jdbc模板 -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<constructor-arg ref="dataSource" />
	</bean>
  	
	<!-- jdbc命名参数模板 -->
	<bean id="namedParameterJdbcTemplate" class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate">
		<constructor-arg ref="dataSource" />
	</bean>
	
	<bean id="applicationContextHelper" class="com.hmk.pro.util.ApplicationContextHelper"/>
		<!-- 配置 Annotation 驱动，扫描@Transactional注解的类定义事务  -->
		<tx:annotation-driven transaction-manager="transactionManager" />
		<!-- 配置事务管理器 -->
		<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
			<property name="dataSource" ref="dataSource" />		
		</bean>

		<!-- 配置事务拦截器对象 -->
		<bean id="transactionInterceptor" class="org.springframework.transaction.interceptor.TransactionInterceptor">
			<!-- 注入事务管理器对象 -->
			<property name="transactionManager" ref="transactionManager" />
			<property name="transactionAttributes">
				<props>
					<prop key="get*">PROPAGATION_SUPPORTS,readOnly</prop>
					<prop key="find*">PROPAGATION_SUPPORTS,readOnly</prop>
					<prop key="list*">PROPAGATION_SUPPORTS,readOnly</prop>
					<prop key="save*">PROPAGATION_REQUIRED</prop>
					<prop key="insert*">PROPAGATION_REQUIRED</prop>
					<prop key="delete*">PROPAGATION_REQUIRED</prop>
					<prop key="remove*">PROPAGATION_REQUIRED</prop>
					<prop key="update*">PROPAGATION_REQUIRED</prop>
					<prop key="*">PROPAGATION_SUPPORTS,readOnly,-Exception</prop>
				</props>
			</property>
		</bean>
		<!-- 通过名称自动代理使用事务控制 -->
		<bean id="beanNameAutoProxyCreator" class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
			<!-- 拦截spring容器中管理对象的后缀 -->
			<property name="beanNames" value="*Service" />
			<!-- 注入事务拦截器 -->
			<property name="interceptorNames" value="transactionInterceptor" />
		</bean>
</beans>