<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.hmk.pro.mapper.base.UserclassinfoMapper" >
  <resultMap id="BaseResultMap" type="com.hmk.pro.po.base.Userclassinfo" >
    <id column="UserClassID" property="userclassid" jdbcType="INTEGER" />
    <result column="UserClassName" property="userclassname" jdbcType="VARCHAR" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="com.hmk.pro.po.base.Userclassinfo" extends="BaseResultMap" >
    <result column="ClassNotes" property="classnotes" jdbcType="LONGVARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    UserClassID, UserClassName
  </sql>
  <sql id="Blob_Column_List" >
    ClassNotes
  </sql>
  <select id="selectMaxId" resultType="java.lang.Integer">
  	select Max(UserClassID) from UserClassInfo;
  </select>
  <select id="selectByPage" resultMap="ResultMapWithBLOBs">
  	SELECT * 
  	FROM UserClassInfo 
  			limit #{startPos},#{pageSize}
  </select>
  
  <select id="selectByExampleWithBLOBs" resultMap="ResultMapWithBLOBs" parameterType="com.hmk.pro.po.base.UserclassinfoExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from UserClassInfo
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.hmk.pro.po.base.UserclassinfoExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from UserClassInfo
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from UserClassInfo
    where UserClassID = #{userclassid,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from UserClassInfo
    where UserClassID = #{userclassid,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.hmk.pro.po.base.UserclassinfoExample" >
    delete from UserClassInfo
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.hmk.pro.po.base.Userclassinfo" >
    insert into UserClassInfo (UserClassID, UserClassName, ClassNotes
      )
    values (#{userclassid,jdbcType=INTEGER}, #{userclassname,jdbcType=VARCHAR}, #{classnotes,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.hmk.pro.po.base.Userclassinfo" >
    insert into UserClassInfo
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="userclassid != null" >
        UserClassID,
      </if>
      <if test="userclassname != null" >
        UserClassName,
      </if>
      <if test="classnotes != null" >
        ClassNotes,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="userclassid != null" >
        #{userclassid,jdbcType=INTEGER},
      </if>
      <if test="userclassname != null" >
        #{userclassname,jdbcType=VARCHAR},
      </if>
      <if test="classnotes != null" >
        #{classnotes,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.hmk.pro.po.base.UserclassinfoExample" resultType="java.lang.Integer" >
    select count(*) from UserClassInfo
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update UserClassInfo
    <set >
      <if test="record.userclassid != null" >
        UserClassID = #{record.userclassid,jdbcType=INTEGER},
      </if>
      <if test="record.userclassname != null" >
        UserClassName = #{record.userclassname,jdbcType=VARCHAR},
      </if>
      <if test="record.classnotes != null" >
        ClassNotes = #{record.classnotes,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map" >
    update UserClassInfo
    set UserClassID = #{record.userclassid,jdbcType=INTEGER},
      UserClassName = #{record.userclassname,jdbcType=VARCHAR},
      ClassNotes = #{record.classnotes,jdbcType=LONGVARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update UserClassInfo
    set UserClassID = #{record.userclassid,jdbcType=INTEGER},
      UserClassName = #{record.userclassname,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.hmk.pro.po.base.Userclassinfo" >
    update UserClassInfo
    <set >
      <if test="userclassname != null" >
        UserClassName = #{userclassname,jdbcType=VARCHAR},
      </if>
      <if test="classnotes != null" >
        ClassNotes = #{classnotes,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where UserClassID = #{userclassid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.hmk.pro.po.base.Userclassinfo" >
    update UserClassInfo
    set UserClassName = #{userclassname,jdbcType=VARCHAR},
      ClassNotes = #{classnotes,jdbcType=LONGVARCHAR}
    where UserClassID = #{userclassid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.hmk.pro.po.base.Userclassinfo" >
    update UserClassInfo
    set UserClassName = #{userclassname,jdbcType=VARCHAR}
    where UserClassID = #{userclassid,jdbcType=INTEGER}
  </update>
</mapper>